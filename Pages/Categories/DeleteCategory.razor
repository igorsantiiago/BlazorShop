@page "/categories/delete/{id:int}"
@inject BlazorShopDbContext _context
@inject NavigationManager _navigationManager
@using Microsoft.EntityFrameworkCore;

<h1>Delete @_model?.Name ?</h1>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @_errorMessage
    </div>
}

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">
    <div class="mb-3">
        <label for="Id" class="form-label">Id</label>
        <InputNumber readonly class="form-control" type="text" id="Id" @bind-Value="_model.Id" />
    </div>
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <InputText readonly class="form-control" type="text" id="Name" @bind-Value="_model.Name" />
    </div>

    <button class="btn btn-danger" type="submit">Delete</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Category? _model = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _model = await _context.Categories.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            var category = await _context.Categories.FirstOrDefaultAsync(x => x.Id == Id);
            if (category is null)
                throw new Exception("Categoria não encontrado");

            _context.Categories.Remove(category);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/categories");
        }
        catch
        {
            _errorMessage = "Não foi possível excluir a categoria. Tente novamente mais tarde.";
        }
    }
}