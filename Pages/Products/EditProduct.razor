@page "/products/edit/{id:int}"
@inject BlazorShopDbContext _context
@inject NavigationManager _navigationManager
@using Microsoft.EntityFrameworkCore;

<h1>@_model?.Name</h1>

<EditForm Model="_model" OnValidSubmit="@HandleSubmitAsync">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="Id" class="form-label">Id</label>
        <InputNumber readonly class="form-control" type="text" id="Id" @bind-Value="_model.Id" />
    </div>

    <div class="mb-3">
        <label for="Name" class="form-label">Nome</label>
        <InputText class="form-control" type="text" id="Name" @bind-Value="_model.Name" />
    </div>

    <div class="mb-3">
        <label for="Description" class="form-label">Descrição</label>
        <InputText class="form-control" type="text" id="Description" @bind-Value="_model.Description" />
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">Preço</label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price" />
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">Categoria</label>
        <InputSelect class="form-control" id="CategoryId" @bind-Value="_model.CategoryId">
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">Atualizar</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private Product? _model = new();
    private List<Category> _categories = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().OrderBy(x => x.Name).ToListAsync();
        _model = await _context.Products.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
    }

    private async Task HandleSubmitAsync()
    {
        try
        {
            var product = await _context.Products.FirstOrDefaultAsync(x => x.Id == Id);
            if (product is null)
                throw new Exception("Produto não encontrado");

            product.Name = _model.Name;
            product.Description = _model.Description;
            product.Price = _model.Price;
            product.CategoryId = _model.CategoryId;

            _context.Products.Update(product);
            await _context.SaveChangesAsync();

            _navigationManager.NavigateTo("/products");
        }
        catch
        {
            _errorMessage = "Não foi possível atualizar os dados. Tente novamente mais tarde.";
        }
    }
}